{
  "_args": [
    [
      "ascii-progress",
      "/home/rafael/Coding/Privat/node.js/RequestCracker"
    ]
  ],
  "_from": "ascii-progress",
  "_id": "ascii-progress@1.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/ascii-progress",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "ascii-progress",
    "rawSpec": "ascii-progress",
    "scope": null,
    "spec": "/home/rafael/Coding/Privat/node.js/RequestCracker/ascii-progress",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:ascii-progress",
  "_shasum": "0635f5cfd0a6771297a51c29018573e355ce2fa8",
  "_shrinkwrap": null,
  "_spec": "ascii-progress",
  "_where": "/home/rafael/Coding/Privat/node.js/RequestCracker",
  "author": {
    "email": "bubkoo.wy@gmail.com",
    "name": "bubkoo"
  },
  "bugs": {
    "url": "https://github.com/bubkoo/ascii-progress/issues"
  },
  "dependencies": {
    "ansi.js": "0.0.5",
    "end-with": "^1.0.2",
    "get-cursor-position": "1.0.1",
    "on-new-line": "1.0.0",
    "start-with": "^1.0.2"
  },
  "description": "Ascii progress-bar(s) in the terminal.",
  "devDependencies": {},
  "gitHead": "bee09fcc689a3cfa1805eb193d54be19ee094ffd",
  "homepage": "https://github.com/bubkoo/ascii-progress",
  "keywords": [
    "progress",
    "bar",
    "meter",
    "ascii",
    "status",
    "console",
    "terminal",
    "ansi.js"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ascii-progress",
  "optionalDependencies": {},
  "readme": "# ascii-progress\n\n> Ascii progress-bar(s) in the terminal.\n\n**Feature**:\n\n- Support multi progress-bars\n- Relative and absolute with\n- Colorful bar and text\n- Highly customizable\n\n\n![snapshot](https://raw.githubusercontent.com/bubkoo/ascii-progress/master/snapshot.gif)\n\n\n## Install\n\n```\n$ npm install ascii-progress\n```\n\n## Usage\n\n> For more usage see the [examples](https://github.com/bubkoo/ascii-progress/blob/master/examples)\n\n```javascript\nvar ProgressBar = require('ascii-progress');\n\nvar bar = new ProgressBar({ \n    schema: ':bar'\n    total : 10 \n});\n\nvar iv = setInterval(function () {\n  bar.tick();\n  if (bar.completed) {\n    clearInterval(iv);\n  }\n}, 100);\n```\n\n\n### Options\n\nThese are keys in the options object you can pass to the progress bar along with\n`total` as seen in the example above.\n\n\n- `schema` - template string of the progress bar. Default `\" [:bar] :current/:total :percent :elapseds :etas'\"`.\n- `total` - total number of ticks to complete. Default `100`.\n- `current`- number of completed ticks. Default `0`.\n- `width` - display width, percentage or less than `1` is relative the terminal's width. Default `options.total`.\n- `filled`- completion character. Default `\"â–‡\"`.\n- `blank` - blank character. Default `\"-\"`.\n- `clear` - clear the progress bar on completion. Default `false`.\n- `callback` -  optional function to call when the progress bar completes.\n\n\n### Properties\n \n - `schema`\n - `total`\n - `current`\n - `completed`\n\n### Methods\n\n#### `setSchema(schema, refresh/tokens)`\n\nUpdate the schema of the progress bar. If `refresh` or `tokens` is truely the progress bar will be refreshed.\n\n#### `tick(delta, tokens)` \n\nUpdate ticks of the progress bar by `delta`, then render the progress bar with optional `tokens`.\n\n#### `update(ratio, tokens)` \n\nUpdate the progress bar to `ratio` by percentage, then render the progress bar with optional `tokens`.\n\n#### `clear()` \n\nClean the progress bar in the terminal.\n\n\n## Schema\n\nThe schema defines appearance the progress bar. Few inner tokens and many \nformatting methods can be used to customer you progress bar.  \n\n### Tokens\n\nThese are tokens you can use in the format of your progress bar.\n\n- `:filled` Completed part of the progress bar.\n- `:blank` Blank part of  the progress bar.\n- `:bar` Whole progress bar, equal to `:completed:blank`.\n- `:current` Current tick number.\n- `:total` Total ticks.\n- `:percent` Completion percentage.\n- `:elapsed` Time elapsed in seconds.\n- `:eta` Estimated completion time in seconds.\n\n### Custom Tokens\n\nYou can define custom tokens by adding a `{name: value}` object parameter to your method (`tick()`, `update()`, etc.) calls.\n\n```javascript\nvar bar = new ProgressBar({\n    schema: ':current: :token1 :token2',\n    total : 3 \n});\nbar.tick({\n  'token1': \"Hello\",\n  'token2': \"World!\"\n})\nbar.tick(2, {\n  'token1': \"Goodbye\",\n  'token2': \"World!\"\n})\n```\n\nThe above example would result in the output below.\n\n```\n1: Hello World!\n3: Goodbye World!\n```\n\n### Colors\n\nColor names can be use in schema:\n\n```\n:bar.red :percent.green\n```\n\nThen the progress bar will be red, and the percentage will be green.\n\nAll available color names:\n\n- red\n- cyan\n- blue\n- grey\n- white\n- black\n- green\n- yellow\n- magenta\n- brightRed\n- brightBlue\n- brightCyan\n- brightWhite\n- brightBlack\n- brightGreen\n- brightYellow\n- brightMagenta\n\nAnd with the `bg` prefix, such as `bgRed`, the color will be applied to the background.\n\n```\n:bar.red.bgBlue\n```\n\nThe above progress bar has blue background and red foreground.\n\n### Gradient\n\n```\n:bar.gradient(red,blue)\n```\n\nThe arguments can be color names or hex color:\n\n- red\n- cyan\n- blue\n- grey\n- white\n- black\n- green\n- yellow\n- magenta\n- \\#xxxxxx\n\n\n### Font style\n\nSame as color names, font style can also be assigned by name:\n\n- bold\n- italic\n- inverse\n- underline\n\n```\n:bar.red :percent.green.bold\n```\n\nThe percentage is green and bold.\n\n\n## Contributing\n\nPull requests and stars are highly welcome.\n\nFor bugs and feature requests, please [create an issue](https://github.com/bubkoo/ascii-progress/issues/new).\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bubkoo/ascii-progress.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.2"
}
